// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model users {
  uid           String     @id @default(uuid())
  email         String     @unique
  display_name  String?    @unique
  is_verified   Boolean    @default(false)
  password      String?
  refresh_token String?
  image_url     String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  role          roles      @relation(fields: [rolesId], references: [id])
  rolesId       Int        @default(1)
  provider      providers  @relation(fields: [providersId], references: [id])
  bookings      bookings[]
  reviews       reviews[]
  providersId   Int
  tenants       tenants?
  created_at    DateTime   @default(now())
  updated_at    DateTime   @updatedAt
  deleted_at    DateTime?
}

model roles {
  id    Int     @id @default(autoincrement())
  role  String
  users users[]
}

model providers {
  id       Int     @id @default(autoincrement())
  provider String
  users    users[]
}

model tenants {
  id             String     @id @default(uuid())
  display_name   String     @unique
  image_url      String?
  id_card_number String?
  phone          String?
  listings       listings[]
  bookings       bookings[]
  user           users      @relation(fields: [usersId], references: [uid])
  usersId        String     @unique
  created_at     DateTime   @default(now())
  updated_at     DateTime   @updatedAt
  deleted_at     DateTime?
}

model listings {
  id                  Int               @id @default(autoincrement())
  title               String
  description         String            @db.LongText
  location_coordinate Json
  address             String
  country             String?
  contact_person      String
  tenant              tenants           @relation(fields: [tenantsId], references: [id])
  tenantsId           String
  rooms               rooms[]
  facility            facilities[]
  category            categories        @relation(fields: [categoriesId], references: [id])
  categoriesId        Int
  nonavailability     nonavailability[]
  listing_images      listing_images[]
  reviews             reviews[]
  created_at          DateTime          @default(now())
  updated_at          DateTime          @updatedAt
  deleted_at          DateTime?
}

model nonavailability {
  id         Int      @id @default(autoincrement())
  start_date DateTime
  end_date   DateTime
  listing    listings @relation(fields: [listingsId], references: [id])
  listingsId Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model facilities {
  id       Int        @id @default(autoincrement())
  facility String
  icon     String
  listing  listings[]
}

model categories {
  id       Int        @id @default(autoincrement())
  category String
  listings listings[]
}

model listing_images {
  id         Int       @id @default(autoincrement())
  image_url  String
  listing    listings  @relation(fields: [listingsId], references: [id])
  listingsId Int
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?
}

model rooms {
  id             Int               @id @default(autoincrement())
  name           String
  price          Decimal           @db.Decimal(11, 2)
  description    String?           @db.LongText
  capacity       Int
  stock          Int               @default(1)
  listing        listings          @relation(fields: [listingsId], references: [id])
  listingsId     Int
  seasonal_price seasonal_prices[]
  room_images    room_images[]
  bookings       bookings[]
  total_bookings Int
  created_at     DateTime          @default(now())
  updated_at     DateTime          @updatedAt
  deleted_at     DateTime?
}

model room_images {
  id         Int       @id @default(autoincrement())
  image_url  String
  room       rooms     @relation(fields: [roomsId], references: [id])
  roomsId    Int
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?
}

model seasonal_prices {
  id         Int      @id @default(autoincrement())
  price      Decimal  @db.Decimal(11, 2)
  start_date DateTime
  end_date   DateTime
  rooms      rooms[]
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model bookings {
  id                String              @id @default(uuid())
  user              users               @relation(fields: [usersId], references: [uid])
  usersId           String
  room              rooms               @relation(fields: [roomsId], references: [id])
  roomsId           Int
  total_price       Int
  start_date        DateTime
  end_date          DateTime
  num_of_guests     Int
  expired_at        DateTime
  created_at        DateTime            @default(now())
  tenant            tenants             @relation(fields: [tenantsId], references: [id])
  tenantsId         String
  payment_proof     String?
  payment_type      payment_types       @relation(fields: [payment_typesId], references: [id])
  payment_typesId   Int
  booking_histories booking_histories[]
  reviews           reviews[]
  promotion         promotions          @relation(fields: [promotionsId], references: [id])
  promotionsId      Int
}

model payment_types {
  id       Int        @id @default(autoincrement())
  type     String
  bookings bookings[]
}

model promotions {
  id               Int        @id @default(autoincrement())
  code             String
  amount           Decimal    @db.Decimal(4, 2)
  name             String
  description      String
  minimum_purchase Int?
  qty              Int?
  start_date       DateTime
  end_date         DateTime
  bookings         bookings[]
  created_at       DateTime   @default(now())
  updated_at       DateTime   @updatedAt
  deleted_at       DateTime?
}

model booking_histories {
  id               Int            @id @default(autoincrement())
  booking          bookings       @relation(fields: [bookingsId], references: [id])
  bookingsId       String
  status           booking_status @relation(fields: [booking_statusId], references: [id])
  booking_statusId Int
  created_at       DateTime
  updated_at       DateTime       @updatedAt
}

model booking_status {
  id                Int                 @id @default(autoincrement())
  status            String
  booking_histories booking_histories[]
}

model reviews {
  id             Int              @id @default(autoincrement())
  rating         Int
  review         String           @db.LongText
  user           users            @relation(fields: [usersId], references: [uid])
  usersId        String
  listing        listings         @relation(fields: [listingsId], references: [id])
  listingsId     Int
  booking        bookings         @relation(fields: [bookingsId], references: [id])
  bookingsId     String
  review_replies review_replies[]
  created_at     DateTime         @default(now())
  updated_at     DateTime         @updatedAt
  deleted_at     DateTime?
}

model review_replies {
  id        Int     @id @default(autoincrement())
  review    reviews @relation(fields: [reviewsId], references: [id])
  reviewsId Int
  reply     String  @db.LongText
}
