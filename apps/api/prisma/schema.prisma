// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model users {
  uid           String     @id @default(uuid())
  email         String     @unique
  display_name  String?    @unique
  is_verified   Boolean    @default(false)
  password      String?
  refresh_token String?
  image_url     String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  role          roles      @relation(fields: [rolesId], references: [id])
  rolesId       Int        @default(1)
  provider      providers  @relation(fields: [providersId], references: [id])
  bookings      bookings[]
  reviews       reviews[]
  providersId   Int
  is_published  Boolean    @default(false)
  tenants       tenants?
  created_at    DateTime   @default(now())
  updated_at    DateTime   @updatedAt
  deleted_at    DateTime?
}

model roles {
  id    Int     @id @default(autoincrement())
  role  String
  users users[]
}

model providers {
  id       Int     @id @default(autoincrement())
  provider String
  users    users[]
}

model tenants {
  id             String        @id @default(uuid())
  display_name   String        @unique
  image_url      String?
  id_card_number String?
  phone          String?
  listings       listings[]
  user           users         @relation(fields: [usersId], references: [uid])
  usersId        String        @unique
  created_at     DateTime      @default(now())
  updated_at     DateTime      @updatedAt
  deleted_at     DateTime?
  bank_details   bank_details?
}

model bank_details {
  id               String    @id @default(uuid())
  tenant           tenants   @relation(fields: [tenantsId], references: [id])
  tenantsId        String    @unique
  card_holder_name String
  card_number      String
  exp_date         DateTime
  cvv              Int
  created_at       DateTime  @default(now())
  updated_at       DateTime  @updatedAt
  deleted_at       DateTime?
}

model listings {
  id                  String               @id @default(cuid())
  title               String
  description         String               @db.LongText
  location_coordinate Json
  address             String
  country             String?
  contact_person      String
  tenant              tenants              @relation(fields: [tenantsId], references: [id])
  tenantsId           String
  category            categories           @relation(fields: [categoriesId], references: [id])
  categoriesId        Int
  listing_images      listing_images[]
  reviews             reviews[]
  created_at          DateTime             @default(now())
  updated_at          DateTime             @updatedAt
  deleted_at          DateTime?
  avg_rating          Int                  @default(0)
  city                String
  click_rate          Int?
  slug                String?
  room_types          room_types[]
  listing_facilities  listing_facilities[]
}

model listing_facilities {
  listing      listings   @relation(fields: [listingsId], references: [id])
  listingsId   String
  facility     facilities @relation(fields: [facilitiesId], references: [id])
  facilitiesId Int

  @@id([listingsId, facilitiesId])
}

model room_types {
  id                   Int               @id @default(autoincrement())
  name                 String?
  stock                Int               @default(1)
  capacity             Int
  bed_details          String
  price                Int
  listing              listings          @relation(fields: [listingsId], references: [id])
  listingsId           String
  has_breakfast_option Boolean           @default(false)
  breakfast_price      Int               @default(0)
  seasonal_prices      seasonal_prices[]
  nonavailability      nonavailability[]
  room_images          room_images[]
  room_facilities      room_facilities[]
  created_at           DateTime          @default(now())
  updated_at           DateTime?         @updatedAt
  deleted_at           DateTime?
  bookings             bookings[]
}

model room_facilities {
  room_type    room_types @relation(fields: [room_typesId], references: [id])
  room_typesId Int
  facility     facilities @relation(fields: [facilitiesId], references: [id])
  facilitiesId Int

  @@id([room_typesId, facilitiesId])
}

model nonavailability {
  id           Int        @id @default(autoincrement())
  start_date   DateTime
  end_date     DateTime
  room_type    room_types @relation(fields: [room_typesId], references: [id])
  room_typesId Int
  created_at   DateTime   @default(now())
  updated_at   DateTime   @updatedAt
}

model facilities {
  id                 Int                  @id @default(autoincrement())
  facility           String
  icon               String
  listing_facilities listing_facilities[]
  room_facilities    room_facilities[]
}

model categories {
  id       Int        @id @default(autoincrement())
  category String
  listings listings[]
}

model listing_images {
  id         Int       @id @default(autoincrement())
  image_url  String
  listing    listings  @relation(fields: [listingsId], references: [id])
  listingsId String
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?
}

model room_images {
  id           Int        @id @default(autoincrement())
  image_url    String
  room_type    room_types @relation(fields: [room_typesId], references: [id])
  room_typesId Int
  created_at   DateTime   @default(now())
  updated_at   DateTime   @updatedAt
  deleted_at   DateTime?
}

model seasonal_prices {
  id           Int        @id @default(autoincrement())
  price        Decimal    @db.Decimal(11, 2)
  start_date   DateTime
  end_date     DateTime
  room_type    room_types @relation(fields: [room_typesId], references: [id])
  room_typesId Int
  created_at   DateTime   @default(now())
  updated_at   DateTime   @updatedAt
}

model bookings {
  id                String              @id @default(uuid())
  user              users               @relation(fields: [usersId], references: [uid])
  usersId           String
  room_type         room_types?         @relation(fields: [room_typesId], references: [id])
  total_price       Int
  details           Json?
  start_date        DateTime
  end_date          DateTime
  num_of_guests     Int
  expired_at        DateTime
  created_at        DateTime            @default(now())
  updated_at        DateTime            @updatedAt
  deleted_at        DateTime?
  payment_proof     String?
  payment_type      payment_types       @relation(fields: [payment_typesId], references: [id])
  payment_typesId   Int
  booking_histories booking_histories[]
  reviews           reviews[]
  promotion         promotions?         @relation(fields: [promotionsId], references: [id])
  promotionsId      Int?
  status            booking_status      @relation(fields: [booking_statusId], references: [id])
  booking_statusId  Int                 @default(1)
  room_typesId      Int?
}

model payment_types {
  id       Int        @id @default(autoincrement())
  type     String
  bookings bookings[]
}

model promotions {
  id               Int        @id @default(autoincrement())
  code             String
  amount           Decimal    @db.Decimal(4, 2)
  name             String
  description      String
  minimum_purchase Int?
  qty              Int?
  start_date       DateTime
  end_date         DateTime
  bookings         bookings[]
  created_at       DateTime   @default(now())
  updated_at       DateTime   @updatedAt
  deleted_at       DateTime?
}

model booking_histories {
  id               Int            @id @default(autoincrement())
  booking          bookings       @relation(fields: [bookingsId], references: [id])
  bookingsId       String
  status           booking_status @relation(fields: [booking_statusId], references: [id])
  booking_statusId Int
  created_at       DateTime       @default(now())
  updated_at       DateTime       @updatedAt
}

model booking_status {
  id                Int                 @id @default(autoincrement())
  status            String
  booking_histories booking_histories[]
  bookings          bookings[]
}

model reviews {
  id             Int              @id @default(autoincrement())
  rating         Int
  review         String           @db.LongText
  user           users            @relation(fields: [usersId], references: [uid])
  usersId        String
  listing        listings         @relation(fields: [listingsId], references: [id])
  listingsId     String
  booking        bookings         @relation(fields: [bookingsId], references: [id])
  bookingsId     String
  review_replies review_replies[]
  created_at     DateTime         @default(now())
  updated_at     DateTime         @updatedAt
  deleted_at     DateTime?
}

model review_replies {
  id        Int     @id @default(autoincrement())
  review    reviews @relation(fields: [reviewsId], references: [id])
  reviewsId Int
  reply     String  @db.LongText
}
